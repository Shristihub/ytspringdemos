package com.productapp.controllers;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.productapp.model.Product;
import com.productapp.model.ProductDTO;
import com.productapp.service.IProductService;

@RestController
@RequestMapping("/product-api")
public class ProductController {

	@Autowired
	IProductService productService;

	@PatchMapping("/products")
	void updatePrice(@RequestBody ProductDTO productDTO) {
		productService.updatePrice(productDTO);
	
	} 

	@PutMapping("/products")
	Product updateProduct(@RequestBody Product product) {
		return productService.addProduct(product);
	}
	
	@PostMapping("/products")
	Product addProduct(@RequestBody Product product) {
		return productService.addProduct(product);
	}
	
	@GetMapping("/products/brand")
	List<Product> getByBrand(@RequestParam("brand") String brand) {
		return productService.getByBrand(brand);
	}

	@GetMapping("/products")
	ResponseEntity<List<Product>> getAll() {
		List<Product> products = productService.getAll();
		HttpHeaders httpHeaders = new HttpHeaders();
		httpHeaders.add("info", "Getting all products ");
		httpHeaders.add("desc", "Retrieve products from database ");
		ResponseEntity<List<Product>> entity = new ResponseEntity<>(products, httpHeaders, HttpStatus.OK);
		return entity;

	}

	@GetMapping("/products/id/{product-id}")
	ResponseEntity<Product> getById(@PathVariable("product-id") int productId) {
		Product product = productService.getById(productId);
		HttpHeaders httpHeaders = new HttpHeaders();
		httpHeaders.add("info", "Getting one product by Id " + productId);
//		return ResponseEntity.ok().headers(httpHeaders).body(product);
		return ResponseEntity.status(HttpStatus.OK).headers(httpHeaders).body(product);

	}

	
	@DeleteMapping("/products/{productId}")
	void deleteProduct(@PathVariable("productId") int productId) {
		productService.deleteProduct(productId);
	}
	
	
}
